import os
import pandas as pd
import json
from openai import OpenAI
from dotenv import load_dotenv

def parse_with_openai(df: pd.DataFrame) -> dict:
    """
    This function takes a pandas DataFrame, converts its first 20 rows to CSV format,
    and sends it to the OpenAI API (GPT-4-turbo) to extract structured time series data
    and metadata based on a predefined schema.

    Parameters:
        df (pd.DataFrame): The input data containing time series information.

    Returns:
        dict: A dictionary containing parsed metadata and time series values.
              Format:
              {
                "metadata": {
                    "unit": str,
                    "source": str,
                    "interval": str
                },
                "timeseries": [
                    {"timestamp": str, "value": float},
                    ...
                ]
              }
    """

    # Convert the first 20 rows of the DataFrame to CSV format (no index column)
    excel_to_csv = df.head(20).to_csv(index=False)

    # Load environment variables (e.g., your OpenAI API key)
    load_dotenv()
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        raise ValueError("API key not found!")

    # Create an OpenAI client instance using your API key
    client = OpenAI(api_key=api_key)

    # Define the structure of the expected output using OpenAI tools (functions)
    tools = [
        {
            "type": "function",
            "function": {
                "name": "extract_timeseries",
                "description": "Extract structured time series data and metadata from CSV data.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "metadata": {
                            "type": "object",
                            "properties": {
                                "unit": {"type": "string"},
                                "source": {"type": "string"},
                                "interval": {"type": "string"}
                            },
                            "required": ["unit", "source", "interval"]
                        },
                        "timeseries": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "timestamp": {"type": "string"},
                                    "value": {"type": "number"}
                                },
                                "required": ["timestamp", "value"]
                            }
                        }
                    },
                    "required": ["metadata", "timeseries"]
                }
            }
        }
    ]

    # Define the system message (instruction for the assistant)
    system_prompt = (
        "You are a parser for time series data. "
        "Analyze the following CSV content and extract time-value pairs along with relevant metadata."
    )

    # Send a chat request to the OpenAI API with the CSV data and the tool definition
    response = client.chat.completions.create(
        model="gpt-4-turbo",  # You can change the model here if needed
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": excel_to_csv}
        ],
        tools=tools,
        tool_choice="auto"  # Automatically lets GPT choose which tool/function to invoke
    )

    # Get the tool call response (i.e., function call generated by GPT)
    tool_call = response.choices[0].message.tool_calls[0]

    try:
        # Extract and parse the structured output (function arguments) as a dictionary
        parsed_data = json.loads(tool_call.function.arguments)
        return parsed_data

    except json.JSONDecodeError as e:
        # Handle the case where the JSON could not be parsed
        raise ValueError("‚ùå Error while extracting JSON data from the OpenAI response") from e
